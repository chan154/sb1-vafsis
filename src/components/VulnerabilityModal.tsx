import React from 'react';
import { X, AlertCircle, Server, Calendar, User, Clock, Link } from 'lucide-react';
import type { Vulnerability } from '../types';
import { Timeline } from './Timeline';

interface Props {
  vulnerability: Vulnerability;
  onClose: () => void;
  onStatusChange: (id: string, status: Vulnerability['status']) => void;
  onAddComment: (id: string, comment: string) => void;
}

export function VulnerabilityModal({ vulnerability, onClose, onStatusChange, onAddComment }: Props) {
  const [comment, setComment] = React.useState('');

  const handleAddComment = () => {
    if (comment.trim()) {
      onAddComment(vulnerability.id, comment);
      setComment('');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg w-full max-w-3xl max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-start">
            <h2 className="text-2xl font-bold text-gray-900">{vulnerability.title}</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
              <X size={24} />
            </button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          <div className="flex flex-wrap gap-4">
            <div className="flex items-center gap-2 bg-gray-100 px-3 py-2 rounded-lg">
              <AlertCircle size={20} className="text-red-500" />
              <span className="font-medium">{vulnerability.severity}</span>
              {vulnerability.cvss && (
                <span className="ml-1 text-sm text-gray-500">(CVSS: {vulnerability.cvss})</span>
              )}
            </div>
            <div className="flex items-center gap-2 bg-gray-100 px-3 py-2 rounded-lg">
              <Server size={20} className="text-blue-500" />
              <span className="font-medium">{vulnerability.affectedSystems.join(', ')}</span>
            </div>
            <div className="flex items-center gap-2 bg-gray-100 px-3 py-2 rounded-lg">
              <Calendar size={20} className="text-green-500" />
              <span className="font-medium">
                Discovered: {new Date(vulnerability.discoveryDate).toLocaleDateString()}
              </span>
            </div>
            {vulnerability.assignedTo && (
              <div className="flex items-center gap-2 bg-gray-100 px-3 py-2 rounded-lg">
                <User size={20} className="text-purple-500" />
                <span className="font-medium">{vulnerability.assignedTo}</span>
              </div>
            )}
            <div className="flex items-center gap-2 bg-gray-100 px-3 py-2 rounded-lg">
              <Clock size={20} className="text-orange-500" />
              <span className="font-medium">
                Updated: {new Date(vulnerability.lastUpdated).toLocaleDateString()}
              </span>
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <h3 className="text-lg font-semibold mb-2">Description</h3>
              <p className="text-gray-700 whitespace-pre-wrap">{vulnerability.description}</p>
            </div>

            {vulnerability.remediation && (
              <div>
                <h3 className="text-lg font-semibold mb-2">Remediation Steps</h3>
                <p className="text-gray-700 whitespace-pre-wrap">{vulnerability.remediation}</p>
              </div>
            )}

            {vulnerability.references && vulnerability.references.length > 0 && (
              <div>
                <h3 className="text-lg font-semibold mb-2">References</h3>
                <ul className="list-disc list-inside space-y-1">
                  {vulnerability.references.map((ref, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <Link size={16} className="text-blue-500" />
                      <a href={ref} target="_blank" rel="noopener noreferrer" 
                         className="text-blue-500 hover:underline">{ref}</a>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            <div>
              <h3 className="text-lg font-semibold mb-2">Status</h3>
              <select
                value={vulnerability.status}
                onChange={(e) => onStatusChange(vulnerability.id, e.target.value as Vulnerability['status'])}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="Open">Open</option>
                <option value="In Progress">In Progress</option>
                <option value="Resolved">Resolved</option>
                <option value="Closed">Closed</option>
              </select>
            </div>

            <div>
              <h3 className="text-lg font-semibold mb-2">Add Comment</h3>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                  placeholder="Add a comment..."
                  className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
                <button
                  onClick={handleAddComment}
                  disabled={!comment.trim()}
                  className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50"
                >
                  Add
                </button>
              </div>
            </div>

            <Timeline events={vulnerability.timeline} />
          </div>
        </div>
      </div>
    </div>
  );
}